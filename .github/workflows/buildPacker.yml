name: Packer Build

on:
  push:
    branches:
        - main

jobs:
  build:
    name: Packer Build Check
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{secrets.DB_PASSWORD}}
          MYSQL_DATABASE: ${{secrets.DB_NAME}}
          MYSQL_USER: ${{secrets.DB_USER}}
          MYSQL_PASSWORD: ${{secrets.DB_PASSWORD}}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

      # Step to create .env file with secret values
    - name: Create .env file
      run: |
        touch .env
        echo "PORT=${{secrets.PORT}}" >> .env
        echo "DB_NAME=${{secrets.DB_NAME}}" >> .env
        echo "DB_PASSWORD=${{secrets.DB_PASSWORD}}" >> .env
        echo "DB_USER=${{secrets.DB_USER}}" >> .env
        echo "DB_HOST=${{secrets.DB_HOST}}" >> .env
        cat .env

    - name: Zip Webapp Directory
      run: zip -r webapp.zip .

    - name: Check if webapp.zip Exists
      run: |
        if [ -f ./webapp.zip ]; then
          echo "webapp.zip exists."
        else
          echo "webapp.zip does not exist."
          exit 1
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "20.x"

    - name: Install Dependencies
      run: npm i

    - name: Configure Environment Variables
      run: |
        echo DB_USER=${{ secrets.DB_USER }}
        echo DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        echo DB_NAME=${{ secrets.DB_NAME }}
        echo DB_HOST=${{ secrets.DB_HOST }}
        echo PORT=${{ secrets.PORT }}

    - name: Wait for MySQL
      run: |
        until mysqladmin ping -h "127.0.0.1" --silent; do
          echo "Waiting for MySQL to be ready..."
          sleep 5
        done

    - name: Run Test
      run: npm test -- --forceExit
      env:
        PORT: ${{secrets.PORT}}
        DB_NAME: ${{secrets.DB_NAME}}
        DB_PASSWORD: ${{secrets.DB_PASSWORD}}
        DB_USER: ${{secrets.DB_USER}}
        HOST: ${{secrets.DB_HOST}}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{secrets.AWS_REGION}}

    - name: Install Packer
      run: sudo apt-get install -y packer

    - name: Install plugins
      run: packer init app/packer/.

    - name: Validate Packer Template
      run: |
        packer validate -var "MYSQL_USER=${{secrets.DB_USER}}" \
                        -var "MYSQL_PASSWORD=${{secrets.DB_PASSWORD}}" \
                        -var "MYSQL_DATABASE=${{secrets.DB_NAME}}" \
                        -var "vpc_id=${{secrets.VPC_ID}}" \
                        -var "subnet_id=${{secrets.SUBNET_ID}}" \
                        app/packer/.

    - name: Build Packer Image
      run: |
        packer build -var "MYSQL_USER=${{secrets.DB_USER}}" \
                     -var "MYSQL_PASSWORD=${{secrets.DB_PASSWORD}}" \
                     -var "MYSQL_DATABASE=${{secrets.DB_NAME}}" \
                     -var "vpc_id=${{secrets.VPC_ID}}" \
                     -var "subnet_id=${{secrets.SUBNET_ID}}" \
                     app/packer/

    - name: Share AMI with DEMO Account
      run: |
        AMI_ID=$(packer build -machine-readable packer-template.json | awk -F, '/artifact,0,id/ {print $6}')
        echo "Built AMI ID: $AMI_ID"
        aws ec2 modify-image-attribute --image-id $AMI_ID --launch-permission "{\"Add\":[{\"UserId\":\"${{ secrets.DEMO_ACCOUNT_ID }}\"}]}"